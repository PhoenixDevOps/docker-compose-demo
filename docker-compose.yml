# DEFINE A DATA VOLUME CONTAINER
# A data volume is a docker container that exists solely for the volume that it contains.
# This is useful because now the data stored in this container will have a lifecycle that
# is independent of the database container lifecycle.  This means, for example, that we
# could update the database container and it would have no affect on the volume container
# or its underlying data!
data:
  image: gliderlabs/alpine
  command: echo "Data Container"
  volumes:
    - /var/lib/postgresql/data/pgdata
  labels:
    org.bibles.role: "Data Container"

# DEFINE A POSTGRES DATABASE CONTAINER
# This container runs the database.  It does not automatically configure any database.
# We'll need a separate container to connect to the database and execute code accordingly.
db:
  image: postgres
  volumes_from:
    - data
  environment:
    - PGDATA=/var/lib/postgresql/data/pgdata
    - POSTGRES_PASSWORD=hello
  ports:
    - "5432:5432"
  labels:
    org.bibles.role: "Database"


# app:
#   build: ./php-app
#   restart: always
#   ports:
#     - "3000:3000"
#   links:
#     - db:db
#   environment:
#     - APP_DB_URI=postgresql://postgres:development@db:5432/postgres
#     - APP_DB_USERNAME=postgres
#     - APP_DB_PASSWORD=hello
#     - APP_ENVIRONMENT==dev
#   labels:
#     org.bibles.role: "App"
