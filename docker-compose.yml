# DEFINE A DATA VOLUME CONTAINER
# A data volume is a docker container that exists solely for the volume that it contains.
# This is useful because now the data stored in this container will have a lifecycle that
# is independent of the database container lifecycle.  This means, for example, that we
# could update the database container and it would have no affect on the volume container
# or its underlying data!
data:
  image: gliderlabs/alpine
  command: echo "Data Container"
  volumes:
    - /Users/josh/repos/abs-php-container/app:/data
  labels:
    org.bibles.role: "Data Container"

# DEFINE A REVERSE-PROXY (WEB SERVER) -- NGINX
# His job is to receive all incoming traffic and forward it to the PHP "app" container
# To update configuration here, you'll need to remove the existing image for this Container
# (dockercomposedemo_web) and re-run "docker-compose up"
web:
  build: ./web
  #image: dylanlindgren/docker-laravel-nginx
  privileged: true
  volumes_from:
    - data
  ports:
    - "80:80"
  links:
    - app:fpm
  labels:
    org.bibles.role: "Reverse Proxy"

# DEFINE THE PHP SERVER
# Listens for incoming requests from nginx.
app:
  build: ./app
  #image: dylanlindgren/docker-laravel-phpfpm
  privileged: true
  volumes_from:
    - data
  links:
    - db:db
  environment:
    - APP_DB_URI=postgresql://postgres:development@db:5432/postgres
    - APP_DB_USERNAME=postgres
    - APP_DB_PASSWORD=hello
    - APP_ENVIRONMENT==dev
  labels:
    org.bibles.role: "App"

# DEFINE A POSTGRES DATABASE CONTAINER
# This container runs the database.  It does not automatically configure any database.
# We'll need a separate container to connect to the database and execute code accordingly.
db:
  image: postgres
  volumes:
    - /var/lib/postgresql/data/pgdata
  environment:
    - PGDATA=/var/lib/postgresql/data/pgdata
    - POSTGRES_PASSWORD=hello
  ports:
    - "5432:5432"
  labels:
    org.bibles.role: "Database"
